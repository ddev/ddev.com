---
import { getCollection, getEntry, render } from "astro:content"
import { formatDate, getCategoryUrl, getSlug } from "./../../lib/api"
import Layout from "./../../layouts/Layout.astro"
import PostBody from "./../../components/PostBody.astro"
import Heading from "./../../components/Heading.astro"
import BlogPostFooter from "./../../components/BlogPostFooter.astro"
import FeatureImage from "./../../components/FeatureImage.astro"
import PostUpdate from "./../../components/PostUpdate.astro"
import { BLOG_DESCRIPTION, GITHUB_URL_WEBSITE } from "src/const"

export async function getStaticPaths() {
  const blogEntries = await getCollection("blog")
  return blogEntries.map((entry) => ({
    params: { id: entry.id },
    props: { entry },
  }))
}

const { entry } = Astro.props
const { Content, remarkPluginFrontmatter } = await render(entry)

const author = await getEntry("authors", getSlug(entry.data.author))

const hasFeatureImage =
  Object.hasOwn(entry.data, "featureImage") &&
  Object.hasOwn(entry.data.featureImage, "src")
const shouldDisplayFeatureImage =
  hasFeatureImage &&
  (!Object.hasOwn(entry.data.featureImage, "hide") ||
    entry.data.featureImage?.hide === false)
const authorImage = author?.data.avatarUrl

// Items we want to add to the JSON-LD schema specifically for blog posts
const blogPostSchema = [
  {
    "@type": "Blog",
    copyrightHolder: {
      "@id": `${Astro.site}#identity`,
    },
    description: BLOG_DESCRIPTION,
    name: `DDEV Blog`,
    publisher: {
      "@id": `${Astro.site}#identity`,
    },
    url: `${Astro.site}blog`,
  },
  {
    "@type": "BlogPosting",
    author: {
      "@type": "Person",
      name: author.data.name,
    },
    dateCreated: entry.data.pubDate,
    dateModified: entry.data.modifiedDate
      ? entry.data.modifiedDate
      : entry.data.pubDate,
    datePublished: entry.data.pubDate,
    description: entry.data.summary ?? ``,
    headline: entry.data.title,
    image: hasFeatureImage
      ? entry.data.featureImage.src
      : `/img/og-default.png`,
    keywords: entry.data.categories.join(","),
    mainEntityOfPage: `${Astro.site}blog/${entry.id}`,
    publisher: {
      "@id": `${Astro.site}#identity`,
    },
    url: `${Astro.site}blog/${entry.id}`,
  },
]
---

<Layout
  title={entry.data.title}
  description={entry.data.summary ? entry.data.summary : null}
  ogImage={hasFeatureImage ? entry.data.featureImage.src : null}
  ogImageAlt={hasFeatureImage ? entry.data.featureImage.alt : null}
  structuredData={blogPostSchema}
>
  <main class="max-w-4xl mx-auto mb-24">
    <Heading
      title={entry.data.title}
      date={formatDate(entry.data.pubDate, { month: "long" })}
      author={entry.data.author}
      authorUrl={`/blog/author/${author.id}`}
      authorAvatar={authorImage}
      readTime={remarkPluginFrontmatter.minutesRead}
      editUrl={GITHUB_URL_WEBSITE+`/`+entry.id+`.md`}
    />
    {
      hasFeatureImage && shouldDisplayFeatureImage && (
        <FeatureImage
          src={entry.data.featureImage.src}
          alt={entry.data.featureImage.alt}
          caption={entry.data.featureImage.caption}
          credit={entry.data.featureImage.credit}
          shadow={entry.data.featureImage.shadow}
        />
      )
    }
    {
      entry.data.modifiedDate && (
        <PostUpdate
          date={entry.data.modifiedDate}
          comment={entry.data.modifiedComment}
        />
      )
    }
    <div class="lg:flex">
      <div class="px-6 lg:px-0 lg:w-2/3">
        <PostBody>
          <Content />
        </PostBody>
      </div>
      <div class="px-6 lg:px-0 lg:w-1/3 lg:pl-24 mt-12 lg:mt-1">
        {
          entry.data.categories.length && (
            <>
              <span class="font-mono text-sm block text-navy-300 tracking-wider dark:text-slate-500">
                Posted In
              </span>
              <ul class="mt-1 dark:text-slate-400">
                {entry.data.categories.map((category) => (
                  <li class="my-1">
                    <a href={getCategoryUrl(category)} class="font-bold">
                      {category}
                    </a>
                  </li>
                ))}
              </ul>
            </>
          )
        }
      </div>
    </div>
  </main>
  <BlogPostFooter activeSlug={entry.id} />
</Layout>
